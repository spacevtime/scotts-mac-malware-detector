#!/bin/sh

#========================================"
# Scott's MacOS X Malware Detector/Remover"
# Last Modification: 2015-Jul-29 3:30 AM"
# ========================================"


# globals
undesiredfilefound=0															# flag to tell us if an undesired file was found
optionerror=0																	# flag to tell us if there was an error while parsing the options
volumetocheck=""																# the name of the disk volume to scan. Blank means the boot drive.

# global options
DO_ALLDRIVES=0																	# gets set to 1 if option -a is chosen
DO_BROWSERPROFILES=0															# gets set to 1 if option -b is chosen
DO_QUARANTINE=0																	# gets set to 1 if option -q is chosen
DO_PANIC=0																		# gets set to 1 if option -P is chosen
DO_VOLUME=0																		# gets set to 1 if option -v is chosen



# enable shell option nullglob which allows filename patterns which match no 
# files to expand to a null string, rather than themselves.
# https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
shopt -s nullglob



# function to contain our usage statement/help menu
function displayTpUsageStatement()
{
    cat <<'EOFFOE'

Usage:     sh scotts_malware_detector.sh -bqv "Macintosh HD"

Purpose:   Searches system and user directories for possible malware files
           and quarantines them if desired. Default just scans boot drive and 
           reports findings, does not quarantine. Must be run as root user.

  -a       All. Scan all connected drives. Default scans only the boot drive.
  -b       Browser profiles. Quarantine all found browser profiles, regardless
           of whether any undesired files are found or not.
  -P       Panic mode! Quarantine all browser profiles and malware files on all 
           connected drives
  -q       Quarantine. Will quarantine found malware files on scanned drive's
           root. Reboot required to remove malware from memory.
  -v [name]       Volume. Only search the disk volume with the provided name.
EOFFOE
}



# Creates a folder called "Malware Quarantine-[timestamp] on the root of the 
# drive we are scanning.
# Uses the $volumetocheck variable to contain its operations to a single disk.
function makequarantinedirectories(){
	printf "Creating quarantine directories ... "
	currenttime=$(date "+%Y.%m.%d-%H.%M.%S")									# get the current time in a format we can use in our quarantine directory name
	quarantine="$volumetocheck/Malware Quarantine-$currenttime"					# the root for our quarantine location on the drive we're chcking,
																				# with time stamp added

	# create an array of directories that should exist in our quarantine
	# location so we can move files in there as needed.
	# This recreates the original directory structure so we know where the
	# files came from.
	quarantineLocations[0]="$quarantine/Applications"
	quarantineLocations+=("$quarantine/Library")
	quarantineLocations+=("$quarantine/Library/Application Support")
	quarantineLocations+=("$quarantine/Library/Frameworks")
	quarantineLocations+=("$quarantine/Library/InputManagers")
	quarantineLocations+=("$quarantine/Library/Internet Plug-Ins")
	quarantineLocations+=("$quarantine/Library/LaunchAgents")
	quarantineLocations+=("$quarantine/Library/LaunchDaemons")
	quarantineLocations+=("$quarantine/Library/Preferences")
	quarantineLocations+=("$quarantine/Library/PrivilegedHelperTools")
	quarantineLocations+=("$quarantine/Library/ScriptingAdditions")
	quarantineLocations+=("$quarantine/System")
	quarantineLocations+=("$quarantine/System/Library")
	quarantineLocations+=("$quarantine/System/Library/Extensions")
	quarantineLocations+=("$quarantine/Users")

	# add a quarantine folder hierarchy for each user account
	for usernamepath in "${userarray[@]}"
	do
		username="${usernamepath##*/}"											#strip out the preceding path from $usernamepath
#		printf "\nCreating quarantine for user $username\n"

		quarantineLocations+=("$quarantine/Users/$username")
		quarantineLocations+=("$quarantine/Users/$username/Desktop")
		quarantineLocations+=("$quarantine/Users/$username/Documents")
		quarantineLocations+=("$quarantine/Users/$username/Downloads")
		quarantineLocations+=("$quarantine/Users/$username/Library")
		quarantineLocations+=("$quarantine/Users/$username/Library/Application Support")
		quarantineLocations+=("$quarantine/Users/$username/Library/Application Support/Mozilla")
		quarantineLocations+=("$quarantine/Users/$username/Library/Application Support/Mozilla/Extensions")
		quarantineLocations+=("$quarantine/Users/$username/Library/Caches")
		quarantineLocations+=("$quarantine/Users/$username/Library/Internet Plug-Ins")
		quarantineLocations+=("$quarantine/Users/$username/Library/LaunchAgents")
		quarantineLocations+=("$quarantine/Users/$username/Library/LaunchDaemons")			#LaunchDaemons does not normally exist in user directory
		quarantineLocations+=("$quarantine/Users/$username/Library/Preferences")
		quarantineLocations+=("$quarantine/Users/$username/Library/ScriptingAdditions")
		quarantineLocations+=("$quarantine/Users/$username/Library/Safari")
		quarantineLocations+=("$quarantine/Users/$username/Library/Safari/Extensions")
	done

	# cycle through the array we made and create each directory that we need.
	# create the root quarantine directory if it does not already exist
	if [ -e "$quarantine" ]
	then
		.
#		printf " found\n"
	else
#		printf " ... not found, creating at $quarantine ..."
		mkdir "$quarantine"
#		printf " done\n"
	fi

	# run down the array of quarantine sub directories and create those
#	printf "Creating quarantine directories that do not already exist...\n"
	for quarantinesub in "${quarantineLocations[@]}"
	do
		if [ -e "$quarantinesub" ]
		then
			.
#			printf "$quarantinesub found\n"
		else
#			printf "\n ... not found, creating at $quarantinesub ..."
			mkdir "$quarantinesub"
#			printf " done\n"
		fi
	done
	printf " done\n"
}



# the workhorse of this script.
# requires $volumetocheck to be set prior to calling
function checkvolume(){

	printf "\nChecking volume $volumetocheck\n\n"

	#get usernames
	printf "Getting user directories ..."
	#old method that didn't work, kept for posterity
	# idx=0
	# for i in $(ls /Users/*); do
	# 	userarray[$idx]=$i
	# 	idx='expr $idx + 1'
	# done
	# #echo "$userarray"

	userarray=("$volumetocheck"/Users/*)										#includes full path
	printf " done\n"


	if [ $DO_QUARANTINE == 1 ] ; then
		makequarantinedirectories
	fi


	# make array of files to search for and another array to store the file's
	# location in the quarantine directory so we know where
	# to move it to in order to maintain the hierarchy from which it came.
	printf "Building undesired file list ...\n"
	undesiredfiles[0]="$volumetocheck/Applications/Codec-M.app"
	quarantineloc[0]="$quarantine/Applications/"

	undesiredfiles+=("$volumetocheck/Applications/ChatZumUninstaller.pkg")
	quarantineloc+=("$quarantine/Applications/")

	# removing the entire SIMBL install. I cannot find any legitimate use for it.
#	undesiredfiles+=("$volumetocheck/Library/Application Support/SIMBL/Plugins/SafariOmnibar.bundle")
#	undesiredfiles+=("$volumetocheck/Library/Application Support/SIMBL/Plugins/CT2285220.bundle")
	undesiredfiles+=("$volumetocheck/Library/Application Support/SIMBL")
	quarantineloc+=("$quarantine/Library/Application Support/")

	undesiredfiles+=("$volumetocheck/Library/LaunchAgents/net.culater.SIMBL.Agent.plist")
	quarantineloc+=("$quarantine/Library/LaunchAgents/")

	undesiredfiles+=("$volumetocheck/Library/ScriptingAdditions/SIMBL.osax")
	quarantineloc+=("$quarantine/Library/ScriptingAdditions/")


	undesiredfiles+=("$volumetocheck/Library/Internet Plug-Ins/uid.plist")
	quarantineloc+=("$quarantine/Library/Internet Plug-Ins/")

	undesiredfiles+=("$volumetocheck/Library/Internet Plug-Ins/zako.plugin")
	quarantineloc+=("$quarantine/Library/Internet Plug-Ins/")

	undesiredfiles+=("$volumetocheck/Library/InputManagers/CTLoader/")
	quarantineloc+=("$quarantine/Library/InputManagers/")

	undesiredfiles+=("$volumetocheck/Library/LaunchAgents/com.conduit.loader.agent.plist")
	quarantineloc+=("$quarantine//Library/LaunchAgents/")

	undesiredfiles+=("$volumetocheck/Library/LaunchDaemons/com.perion.searchprotectd.plist")
	quarantineloc+=("$quarantine/Library/LaunchDaemons/")

	undesiredfiles+=("$volumetocheck/Library/Application Support/Conduit/")
	quarantineloc+=("$quarantine/Library/Application Support/")

	undesiredfiles+=("$volumetocheck/Applications/SearchProtect.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/SearchProtect/")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/Savekeep.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/Vidx.app")
	quarantineloc+=("$quarantine/Applications/")


	#genieo
	undesiredfiles+=("$volumetocheck/Applications/Genieo.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/Uninstall Genieo.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/Uninstall IM Completer.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/InstallMac.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Library/LaunchAgents/com.genieoinnovation.macextension.plist")
	quarantineloc+=("$quarantine/Library/LaunchAgents//")

	undesiredfiles+=("$volumetocheck/Library/PrivilegedHelperTools/com.genieoinnovation.macextension.client")
	quarantineloc+=("$quarantine/Library/PrivilegedHelperTools/")

	undesiredfiles+=("$volumetocheck/Library/Frameworks/GenieoExtra.framework")
	quarantineloc+=("$quarantine/Library/Frameworks/")



	# Crisis tojan
	# http://www.intego.com/mac-security-blog/new-apple-mac-trojan-called-osxcrisis-discovered-by-intego-virus-team/


	# Ventir keylogger trojan
	# http://www.intego.com/mac-security-blog/ventir-trojan-intercepts-keystrokes-from-mac-os-x-computers/
	undesiredfiles+=("$volumetocheck/Library/.local/")
	quarantineloc+=("$quarantine/Library/")

	undesiredfiles+=("$volumetocheck/System/Library/Extensions/updated.kext")
	quarantineloc+=("$quarantine/System/Library/Extensions/")

	undesiredfiles+=("$volumetocheck/Library/LaunchAgents/com.updated.launchagent.plist")
	quarantineloc+=("$quarantine/Library/LaunchAgents/")

	undesiredfiles+=("$volumetocheck/Library/LaunchDaemons/com.updated.launchagent.plist")
	quarantineloc+=("$quarantine/Library/LaunchDaemons/")



	# Vuze
	undesiredfiles+=("$volumetocheck/Applications/JustCloud.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/TuneUp.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/Vuze.app")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Applications/__MACOSX")
	quarantineloc+=("$quarantine/Applications/")

	undesiredfiles+=("$volumetocheck/Library/Preferences/com.apple.java.util.prefs.plist")
	quarantineloc+=("$quarantine/Library/Preferences/")

	undesiredfiles+=("$volumetocheck/Library/Preferences/com.install4j.installations.plist")
	quarantineloc+=("$quarantine/Library/Preferences/")



	#
	# http://www.baesystemsai.blogspot.co.uk/2015/06/new-mac-os-malware-exploits-mackeeper.html
	undesiredfiles+=("$volumetocheck/Users/Shared/dufh")
	quarantineloc+=("$quarantine/Users/Shared/")


	# loop through the array of usernames on the target drive and 
	# add these files for each user directory
	for usernamepath in "${userarray[@]}"
	do
		username="${usernamepath##*/}"											#strip out the preceding path so we get just the user name itself
		printf "    adding files for user directory: $username ..."

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Codec-M")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/com.codecm.uploader.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/FlashPlayer11.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/FlashPlayer12.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/FlashPlayer13.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/FlashPlayer14.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/FlashPlayer15.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/FlashPlayer16.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Conduit")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Internet Plug-Ins/ConduitNPAPIPlugin.plugin")
		quarantineloc+=("$quarantine/Users/$username/Library/Internet Plug-Ins/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Internet Plug-Ins/TroviNPAPIPlugin.plugin")
		quarantineloc+=("$quarantine/Users/$username/Library/Internet Plug-Ins/")

		undesiredfiles+=("$volumetocheck/Users/$username/Conduit")
		quarantineloc+=("$quarantine/Users/$username/")

		undesiredfiles+=("$volumetocheck/Users/$username/Trovi")
		quarantineloc+=("$quarantine/Users/$username/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Spigot")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Mozilla/Extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/Mozilla/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/Safari Security")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/shopy-mate_enabler.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/shopy-mate_enabler.sh")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/shopy-mate_updater.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/shopy-mate_updater.sh")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/shopy-mate.ver")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")


		#genieo
		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Genieo")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/com.genieoinnovation.Installer")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/Genieo.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Safari/Extensions/Omnibar.safariextz")
		quarantineloc+=("$quarantine/Users/$username/Library/Safari/Extensions/")


		# Crisis tojan
		# http://www.intego.com/mac-security-blog/new-apple-mac-trojan-called-osxcrisis-discovered-by-intego-virus-team/
		undesiredfiles+=("$volumetocheck/Users/$username/Library/ScriptingAdditions/appleHID")
		quarantineloc+=("$quarantine/Users/$username/Library/ScriptingAdditions/")


		# Ventir keylogger trojan
		# http://www.intego.com/mac-security-blog/ventir-trojan-intercepts-keystrokes-from-mac-os-x-computers/
		undesiredfiles+=("$volumetocheck/Users/$username/Library/.local")
		quarantineloc+=("$quarantine/Users/$username/Library/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/com.updated.launchagent.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchDaemons/com.updated.launchagent.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchDaemons/")


		# Vuze
		undesiredfiles+=("$volumetocheck/Users/$username/Desktop/Vuze")
		quarantineloc+=("$quarantine/Users/$username/Desktop/")

		undesiredfiles+=("$volumetocheck/Users/$username/Documents/Vuze Downloads")
		quarantineloc+=("$quarantine/Users/$username/Documents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Downloads/VuzeBittorrentClientInstaller.dmg")
		quarantineloc+=("$quarantine/Users/$username/Downloads/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Spigot")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Application Support/Vuze")
		quarantineloc+=("$quarantine/Users/$username/Library/Application Support/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Caches/com.azureus.vuze")
		quarantineloc+=("$quarantine/Users/$username/Library/Caches/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/com.jdibackup.JustCloud.autostart.plist")
		quarantineloc+=("$quarantine/Users/$username//Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/LaunchAgents/com.jdibackup.JustCloud.notify.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/LaunchAgents/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Preferences/com.apple.java.util.prefs.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/Preferences/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Preferences/com.azureus.vuze.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/Preferences/")

		undesiredfiles+=("$volumetocheck/Users/$username/Library/Preferences/com.install4j.installations.plist")
		quarantineloc+=("$quarantine/Users/$username/Library/Preferences/")

		printf " done\n"
	done
	printf " done\n"


	# run down the list of files, check for each and quarantine if desired
	idx=0																		# keep an index so we can match up our undesiredfiles and quarantineloc arrays
	for filename in "${undesiredfiles[@]}"
	do
		printf "searching for: $filename ..."
		if [ -e "$filename" ]
		then
			undesiredfilefound=1
			printf " \x1b\x16[37;41mFOUND!!\x1b\x16[0m"

			if [ $DO_QUARANTINE == 1 ] ; then
				printf " ... quarantining ..."
#				mv -f "$filename" "$quarantine/${filename##*/}"					# old mv line before we were using dual arrays. brackets and ##*/ removes preceding path and gives just filename
				mv -f "$filename" "${quarantineloc[$idx]}/${filename##*/}"		# move file from old location to its matching/corresponding location in our quarantine directory structure
				printf " done"
			fi
		else
			printf " not found"
		fi
		printf "\n"
		idx=$((idx+1))
	done



	# disable any existing browser profiles
	if [ $DO_BROWSERPROFILES == 1 ] ; then

		for username in "${userarray[@]}"
		do
			# Chrome
			printf "Disabling existing Chrome profiles for user $username ..."
			browserProfile="$username/Library/Application Support/Google/Chrome/Default"
			if [ -e "$browserProfile" ]
			then
				mv -f "$browserProfile" "$browserProfile-Quarantined"
			fi

			# Firefox
			printf "Disabling existing Firefox profiles for user $username ..."
			browserProfile="$username/Library/Application Support/Firefox/Profiles"
			if [ -e "$browserProfile" ]
			then
				mv -f "$browserProfile" "$browserProfile-Quarantined"
			fi

			# Safari
			printf "Disabling existing Safari profiles for user $username ..."
			browserProfile="$username/Library/Safari"
			if [ -e "$browserProfile" ]
			then
				mv -f "$browserProfile" "$browserProfile-Quarantined"
			fi

			printf " done\n"
		done
	fi

	if [ $undesiredfilefound == 1 ] ; then
		if [ $DO_QUARANTINE == 1 ] ; then
			printf "\n\n\x1b\x16[37;41mundesired files found and quarantined. REBOOT your computer now.\x1b\x16[0m\n\n"
		else
			printf "\n\n\x1b\x16[37;41mundesired files found but NOT quarantined. Proceed at your own risk.\x1b\x16[0m\n\n"		
		fi
	else
		printf "\n\n\x1b\x16[37;41mNo undesired files found.\x1b\x16[0m\n\n"
	fi

}



## main


##
# process arguments
# The default behavior is detection-mode only. No modifications are made to the
# file system.
##
while getopts :abhPqv: option
do
	case "$option" in
	a)
		DO_ALLDRIVES=1
		;;
	b)
		DO_BROWSERPROFILES=1
		;;
	h)
		displayTpUsageStatement
		exit 0
		;;
	P)
		DO_PANIC=1
		DO_ALLDRIVES=1
		DO_BROWSERPROFILES=1
		DO_QUARANTINE=1
		DO_VOLUME=0
		;;
	q)
		DO_QUARANTINE=1
		;;
	v)
		volumetocheck="/Volumes/$OPTARG"
		printf "specific volume selected ... $volumetocheck\n"
		DO_VOLUME=1
		;;
	*)
		optionerror=1
		displayTpUsageStatement
		exit 1
		;;
		esac
done



if [ $optionerror == 0 ] ; then

	if [ $DO_ALLDRIVES == 1 ] ; then
		volumearray=(/Volumes/*)
		for volume in "${volumearray[@]}"
		do
			volumetocheck="$volume"
			checkvolume
		done
	else

		# for all other cases, volumetocheck is set above in processarguments, so we
		# just need to call checkvolume
		checkvolume

	fi

fi
